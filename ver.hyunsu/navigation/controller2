import time
import math
import RPi.GPIO as GPIO
from DFRobot_RaspberryPi_Expansion_Board import DFRobot_Expansion_Board_IIC as Board
from DFRobot_RaspberryPi_Expansion_Board import DFRobot_Expansion_Board_Servo as Servo

class Controller:
    def __init__(self, steer_channel=0, in1_channel=1, in2_channel=2, ena_gpio=16, i2c_bus=1, addr=0x10):
        self.steer_ch = steer_channel
        self.in1_ch = in1_channel
        self.in2_ch = in2_channel
        self.ena_gpio = ena_gpio

        self.ANGLE_LEFT = 100
        self.ANGLE_RIGHT = 30
        self.ANGLE_FORWARD = 65

        self.board = Board(i2c_bus, addr)
        while self.board.begin() != self.board.STA_OK:
            print("[Init] I2C 보드 초기화 실패, 재시도 중...")
            time.sleep(1)
        print("[Init] I2C 보드 초기화 성공")

        self.servo = Servo(self.board)
        self.servo.begin()

        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.ena_gpio, GPIO.OUT)
        GPIO.output(self.ena_gpio, GPIO.HIGH)

        self.set_angle(self.ANGLE_FORWARD)
        self.stop()
        print(f"[Init] steer={steer_channel}, in1={in1_channel}, in2={in2_channel}, ena={ena_gpio}")

        self.is_steering = False
        self.is_moving = False
        self.steer_start_time = time.time()

    def set_angle(self, angle, delay=0.3):
        angle = max(30, min(18-00, angle))
        self.board.set_pwm_frequency(50)
        self.servo.move(self.steer_ch, angle)
        print(f"[Steering] angle={angle}°")
        self.steer_start_time = time.time()
        self.is_steering = True

    def set_speed(self, speed_percent, reverse=False, sleep_duration=0.5):
        self.board.set_pwm_frequency(1000)
        duty = max(0, min(100, speed_percent))
        if reverse:
            self.board.set_pwm_duty([self.in1_ch], 0)
            self.board.set_pwm_duty([self.in2_ch], duty)
            print(f"[Motor] ← 후진, IN1=0%, IN2={duty:.1f}%")
        else:
            self.board.set_pwm_duty([self.in1_ch], duty)
            self.board.set_pwm_duty([self.in2_ch], 0)
            print(f"[Motor] → 전진, IN1={duty:.1f}%, IN2=0%")
        self.is_moving = True
        time.sleep(sleep_duration)

    def stop(self):
        self.board.set_pwm_frequency(1000)
        self.board.set_pwm_duty([self.in1_ch], 0)
        self.board.set_pwm_duty([self.in2_ch], 0)
        print("[Stop] 모터 정지")
        self.is_moving = False
        time.sleep(0.5)

    def map_physical_angle_to_servo(self, physical_angle_deg):
        servo_angle = physical_angle_deg - 25
        return servo_angle

    def update_navigation(self):
        # 간단한 busy 체크 (향후 위치 기반 확장 가능)
        return not self.is_busy

    @property
    def is_busy(self):
        return self.is_steering or self.is_moving

    def steering_and_offset(self, line, desired_offset=0.0):
        x1, y1, x2, y2 = line
        dx = x2 - x1
        dy = y2 - y1

        if dx == 0:
            angle = 0.0
        else:
            angle = -math.degrees(math.atan2(dy, dx))

        angle += desired_offset
        servo_angle = self.map_physical_angle_to_servo(angle)
        return servo_angle

    def cleanup(self):
        self.stop()
        GPIO.cleanup()
        print("[Cleanup] GPIO 정리 완료")
